use std::str::FromStr;
use crate::ast;
use crate::ast::Type;

grammar;

pub Type: Type = {
Star, 
Var,
Arrow,
ForAll,
Lambda,
App,
Remote,
};
pub Star:Type = "star" ":" <num:Num> => ast::Type::Star(num);
pub Var:Type = "var" "{" <name:Name> "," <num:Num> "}" => ast::Type::Var(name, num);
pub Arrow:Type = "arrow" <type1:Type> "->" <type2:Type> => ast::Type::Arrow(Box::new(type1), Box::new(type2));
pub ForAll:Type = "forall" "{" <name:Name> "}" "{" <type1:Type> "," <type2:Type> "}" => ast::Type::ForAll(name, Box::new(type1), Box::new(type2));
pub Lambda:Type = "lambda" "{" <name:Name> "}" "{" <type1:Type> "," <type2:Type> "}" => ast::Type::Lambda(name, Box::new(type1), Box::new(type2));
pub App:Type = "app" <type1:Type> "(" <type2:Type> ")" => ast::Type::App(Box::new(type1), Box::new(type2));
pub Remote:Type = "remote" "{" <name:Name> "}" => ast::Type::Remote(name);


pub Name: String = {
    r"[a-zA-Z]+" => String::from_str(<>).unwrap(),
};
pub Num: usize = {
    r"\d+" => <>.parse::<usize>().unwrap(),
};